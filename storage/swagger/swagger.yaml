openapi: 3.0.0
info:
  title: IoT Management System
  description: Documentation for the Application API
  version: 1.0.0
servers:
  - url: 'https://api.iot-ms.xyz'
  - url: 'https://ims.local'
security:
  - bearerAuth: []
paths:
  /api/login:
    post:
      tags:
        - "Authentication"
      summary: 'Logs user into the system'
      security: []
      description: ''
      responses:
        200:
          description: User is logged in.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
                  token:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                password:
                  type: string
                device_name:
                  type: string
        required: true
  /api/me:
    get:
      summary: ''
      description: ''
      deprecated: false
      responses:
        '200':
          description: OK
        '401':
          description: (Unauthorized) Invalid or missing Access Token
  /api/devices/data:
    post:
      summary: ''
      description: ''
      deprecated: false
      responses:
        '200':
          description: OK
        '401':
          description: (Unauthorized) Invalid or missing Access Token
  /api/userDevices:
    get:
      tags:
        - User Devices
      summary: 'Returns all user devices'
      description: ''
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserDevice'
        401:
          description: (Unauthorized) Invalid or missing Access Token
    post:
      tags:
        - User Devices
      summary: 'Adds a new user device'
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDevice'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDevice'
        '401':
          description: (Unauthorized) Invalid or missing Access Token
  '/api/userDevices/{userDeviceId}':
    get:
      tags:
        - User Devices
      summary: 'Returns a single user device.'
      description: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDevice'
        '401':
          description: (Unauthorized) Invalid or missing Access Token
      parameters:
        - name: userDeviceId
          in: path
          required: true
          description: 'ID of the user device'
          schema:
            type: string
    put:
      tags:
        - User Devices
      summary: 'Updates given user device.'
      description: ''
      deprecated: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDevice'
      responses:
        '200':
          description: OK
        '401':
          description: (Unauthorized) Invalid or missing Access Token
      parameters:
        - name: userDeviceId
          in: path
          required: true
          description: 'ID of the device'
          schema:
            type: string
    delete:
      tags:
        - User Devices
      summary: 'Deletes the given user device along with its data and parameters.'
      description: ''
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
        401:
          description: (Unauthorized) Invalid or missing Access Token
      parameters:
        - name: userDeviceId
          in: path
          required: true
          description: 'ID of the device'
          schema:
            type: integer
  /api/devices:
    get:
      tags:
      - Devices
      summary: ''
      description: ''
      deprecated: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Device'
        401:
          description: (Unauthorized) Invalid or missing Access Token
    post:
      tags:
        - Devices
      summary: 'Creates a new device'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '401':
          description: (Unauthorized) Invalid or missing Access Token
  '/api/devices/{deviceId}':
    get:
      tags:
        - Devices
      summary: 'Returns a device'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '401':
          description: (Unauthorized) Invalid or missing Access Token
      parameters:
        - name: deviceId
          in: path
          required: true
          description: 'ID of the device'
          schema:
            type: integer
    put:
      tags:
        - Devices
      summary: 'Updates an existing device'
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        '401':
          description: (Unauthorized) Invalid or missing Access Token
      parameters:
        - name: device
          in: path
          required: true
          description: ''
          schema:
            type: integer
  /api/users:
    get:
      summary: ''
      responses:
        '200':
          description: OK
        '401':
          description: (Unauthorized) Invalid or missing Access Token
    post:
      summary: ''
      description: ''
      deprecated: false
      responses:
        '200':
          description: OK
        '401':
          description: (Unauthorized) Invalid or missing Access Token
  '/api/users/{user}':
    get:
      summary: ''
      description: ''
      deprecated: false
      responses:
        '200':
          description: OK
        '401':
          description: (Unauthorized) Invalid or missing Access Token
      parameters:
        - name: user
          in: path
          required: true
          description: ''
          schema:
            type: string
    put:
      summary: ''
      description: ''
      deprecated: false
      responses:
        '200':
          description: OK
        '401':
          description: (Unauthorized) Invalid or missing Access Token
      parameters:
        - name: user
          in: path
          required: true
          description: ''
          schema:
            type: string
    delete:
      summary: ''
      description: ''
      deprecated: false
      responses:
        '200':
          description: OK
        '401':
          description: (Unauthorized) Invalid or missing Access Token
      parameters:
        - name: user
          in: path
          required: true
          description: ''
          schema:
            type: string
  /api/places:
    get:
      tags:
        - Places
      summary: Returns all places belonging to the user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Place'
        '401':
          description: (Unauthorized) Invalid or missing Access Token
    post:
      tags:
        - Places
      summary: 'Creates a new place.'
      responses:
        '200':
          description: OK
        '401':
          description: (Unauthorized) Invalid or missing Access Token
  '/api/places/{place}':
    get:
      summary: ''
      description: ''
      deprecated: false
      responses:
        '200':
          description: OK
        '401':
          description: (Unauthorized) Invalid or missing Access Token
      parameters:
        - name: place
          in: path
          required: true
          description: ''
          schema:
            type: string
    put:
      summary: ''
      description: ''
      deprecated: false
      responses:
        '200':
          description: OK
        '401':
          description: (Unauthorized) Invalid or missing Access Token
      parameters:
        - name: place
          in: path
          required: true
          description: ''
          schema:
            type: string
    delete:
      summary: ''
      description: ''
      deprecated: false
      responses:
        '200':
          description: OK
        '401':
          description: (Unauthorized) Invalid or missing Access Token
      parameters:
        - name: place
          in: path
          required: true
          description: ''
          schema:
            type: string
  '/api/places/{place}/userDevices':
    get:
      summary: ''
      description: ''
      deprecated: false
      responses:
        '200':
          description: OK
        '401':
          description: (Unauthorized) Invalid or missing Access Token
      parameters:
        - name: place
          in: path
          required: true
          description: ''
          schema:
            type: string
    post:
      summary: ''
      description: ''
      deprecated: false
      responses:
        '200':
          description: OK
        '401':
          description: (Unauthorized) Invalid or missing Access Token
      parameters:
        - name: place
          in: path
          required: true
          description: ''
          schema:
            type: string
  '/api/places/{place}/userDevices/{userDevice}':
    get:
      summary: ''
      description: ''
      deprecated: false
      responses:
        '200':
          description: OK
        '401':
          description: (Unauthorized) Invalid or missing Access Token
      parameters:
        - name: place
          in: path
          required: true
          description: ''
          schema:
            type: string
        - name: userDevice
          in: path
          required: true
          description: ''
          schema:
            type: string
    put:
      summary: ''
      description: ''
      deprecated: false
      responses:
        '200':
          description: OK
        '401':
          description: (Unauthorized) Invalid or missing Access Token
      parameters:
        - name: place
          in: path
          required: true
          description: ''
          schema:
            type: string
        - name: userDevice
          in: path
          required: true
          description: ''
          schema:
            type: string
    delete:
      summary: ''
      description: ''
      deprecated: false
      responses:
        '200':
          description: OK
        '401':
          description: (Unauthorized) Invalid or missing Access Token
      parameters:
        - name: place
          in: path
          required: true
          description: ''
          schema:
            type: string
        - name: userDevice
          in: path
          required: true
          description: ''
          schema:
            type: string
tags:
  - name: Authentication
  - name: Users
  - name: Places
  - name: Devices
  - name: User Devices
components:
  schemas:
    UserDevice:
      type: object
      required:
        - name
        - place_id
        - mac_address
        - ip_address
        - parameters
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        mac_address:
          type: string
        ip_address:
          type: string
        created_at:
          type: string
          readOnly: true
        updated_at:
          type: string
          readOnly: true
        parameters_count:
          type: integer
          readOnly: true
        user_id:
          type: integer
          readOnly: true
        device_id:
          type: integer
          description: If null, a new Device will be created with the `name`. If a device with the same `mac_address`, `ip_address`, `device_id` and `place_id` exists, it will fail.
        place_id:
          type: integer
          description: ID of a place belonging to User
        parameters:
          type: object
          additionalProperties:
            type: object
            minProperties: 1
            properties:
              name:
                type: string
              unit:
                type: string
        device:
          type: object
          readOnly: true
          properties:
            id:
              type: integer
            name:
              type: string
        place:
          type: object
          readOnly: true
          properties:
            id:
              type: integer
            name:
              type: string
    Device:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
    User:
      required:
        - name
        - email
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        email:
          type: string
        phone_number:
          type: string
        created_at:
          type: string
          readOnly: true
        updated_at:
          type: string
          readOnly: true
    Place:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        parent:
          type: integer
          description: Nullable. Required only if you want to create a child place.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
